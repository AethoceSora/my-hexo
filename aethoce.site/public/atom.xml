<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aethoce&#39;s Blog</title>
  
  <subtitle>为开放自由的互联网做点微小的贡献</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-24T12:00:18.193Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jinghong Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>云场景下的网络QoS</title>
    <link href="http://example.com/2022/12/24/QoS/"/>
    <id>http://example.com/2022/12/24/QoS/</id>
    <published>2022-12-24T10:51:17.644Z</published>
    <updated>2022-12-24T12:00:18.193Z</updated>
    
    <content type="html"><![CDATA[<p>公共的网络链路总会不可避免的产生带宽抢占的问题，我们通常使用QoS技术保障大多数用户的服务质量。</p><p><img src="https://static001.geekbang.org/resource/image/74/11/747b0d537fd1705171ffcca3faf96211.jpg?wh=1539*646" alt="img"></p><p>一台服务器能控制的只有出方向的QoS，通过Shaping将出站流量整形，至于入栈流量只能通过Policy决定丢弃哪一部分数据包。</p><h2 id="队列方式控制网络QoS"><a href="#队列方式控制网络QoS" class="headerlink" title="队列方式控制网络QoS"></a>队列方式控制网络QoS</h2><p>Linux下的TC就主要是使用队列技术控制的网络QoS。</p><h3 id="无类别排队规则"><a href="#无类别排队规则" class="headerlink" title="无类别排队规则"></a>无类别排队规则</h3><p>不分类（或称无类别）排队规则（classless queueing disciplines）可以对某个网络 接口（interface）上的所有流量进行<strong>无差别整形</strong>。包括对数据进行：</p><ul><li>重新调度（reschedule）</li><li>增加延迟（delay）</li><li>丢弃（drop）</li></ul><p>与 classless qdisc 对应的是 classful qdisc，即有类别（或称分类别）排队规则。目前最常用的classless qdisc 是<strong>pfifo_fast</strong>，这也是很多系统上的 默认排队规则。</p><h5 id="pfifo-fast-先入先出队列"><a href="#pfifo-fast-先入先出队列" class="headerlink" title="pfifo_fast 先入先出队列"></a>pfifo_fast 先入先出队列</h5><p>如名字所示，这是一个先入先出(FIFO)队列，因此对所有的包都一视同仁。</p><p><img src="https://arthurchiao.art/assets/img/lartc-qdisc/pfifo_fast-qdisc.png" alt="img"></p><p>pfifo_fast有三个所谓的 “band”（可理解为三个队列），编号分别为 0、1、2：</p><p><img src="https://static001.geekbang.org/resource/image/e3/6c/e391b4b79580a7d66afe4307ff3f6f6c.jpg?wh=2037*1175" alt="img"></p><ul><li>每个band上分别执行 FIFO 规则。</li><li>如果band 0有数据，就不会处理band 1；同理，band 1有数据时，不会去处理band 2。</li><li>内核会检查数据包的 <code>TOS</code>字段，将“最小延迟”的包放到band 0。</li></ul><h5 id="Stochastic-Fair-Queuing-随机公平队列"><a href="#Stochastic-Fair-Queuing-随机公平队列" class="headerlink" title="Stochastic Fair Queuing (随机公平队列)"></a>Stochastic Fair Queuing (随机公平队列)</h5><p><img src="https://static001.geekbang.org/resource/image/b6/99/b6ec2e4e20ddee7d6952b7fa4586ba99.jpg?wh=2177*1182" alt="img"></p><p>这种无类别队列规则会建立很多的 FIFO 的队列，TCP Session 会计算 hash 值，通过 hash 值分配到某个队列。在队列的另一端，网络包会通过轮询策略从各个队列中取出发送。这样不会有一个 Session 占据所有的流量。</p><p>当然，如果两个 Session 的 hash 是一样的，会共享一个队列，也有可能互相影响。hash 函数会经常改变，从而 session 不会总是相互影响。</p><h5 id="Tolen-Bucket-Filte-TBF-令牌桶规则"><a href="#Tolen-Bucket-Filte-TBF-令牌桶规则" class="headerlink" title="Tolen Bucket Filte (TBF,令牌桶规则)"></a>Tolen Bucket Filte (TBF,令牌桶规则)</h5><p><img src="https://static001.geekbang.org/resource/image/14/9b/145c6f8593bf7603eae79246b9d6859b.jpg?wh=1894*1100" alt="img"></p><p>所有的网络包排成队列进行发送，但不是到了队头就能发送，而是需要拿到令牌才能发送。</p><p>令牌根据设定的速度生成，所以即便队列很长，也是按照一定的速度进行发送的。当没有包在队列中的时候，令牌还是以既定的速度生成，但是不是无限累积的，而是放满了桶为止。</p><p>设置桶的大小为了避免下面的情况：当长时间没有网络包发送的时候，积累了大量的令牌，突然来了大量的网络包，每个都能得到令牌，造成瞬间流量大增。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;公共的网络链路总会不可避免的产生带宽抢占的问题，我们通常使用QoS技术保障大多数用户的服务质量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static001.geekbang.org/resource/image/74/11/747b0d537fd1705171f</summary>
      
    
    
    
    
    <category term="Computer Network" scheme="http://example.com/tags/Computer-Network/"/>
    
  </entry>
  
  <entry>
    <title>高性能计算-基准测试程序Linpack（HPL）</title>
    <link href="http://example.com/2022/12/11/HPL/"/>
    <id>http://example.com/2022/12/11/HPL/</id>
    <published>2022-12-11T02:48:16.705Z</published>
    <updated>2022-12-13T01:14:16.822Z</updated>
    
    <content type="html"><![CDATA[<p>自通用计算机时代开始以来，就出现了各种用于评估计算机性能的基准测试程序。这些程序的性质通常反映了构建计算机的预期目的，同时还提供了可以与制造商的理论性能估计进行比较的经验性能测量。</p><p>高性能计算中最广泛使用的基准之一就是Linpack基准，它的起源是一个线性代数运算包，后来被Lapack库和其他竞争对手取代。但Linpack的基准测试程序在以后的日子里继续发挥强大的影响力。</p><p>HPL，即(High-Performance <em>Linpack</em>)是早期Linpack的衍生产品，其高度并行化的设计，使得它用于评估TOP500超级计算机的性能排名。</p><h2 id="编译安装HPL"><a href="#编译安装HPL" class="headerlink" title="编译安装HPL"></a>编译安装HPL</h2><h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><p>在安装HPL之前，系统上需要安装好支持C语言和Fortran77语言的编译器，我个人选择使用gcc与gfortran ，我将用他们来安装BLAS、MPICH以及HPL本体。</p><h4 id="BLAS"><a href="#BLAS" class="headerlink" title="BLAS"></a>BLAS</h4><p>到<a href="http://www.netlib.org/blas/">BLAS官网</a>下载好源码，使用tar指令解压。进入BLAS文件夹，执行编译指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gfortran -c -O3 *.f </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译所有的 .f 文件，生成 .o文件</span></span><br><span class="line"> </span><br><span class="line">ar rv libblas.a *.o  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">链接所有的 .o文件，生成.a 文件</span></span><br><span class="line"> </span><br><span class="line">cp libblas.a /usr/local/lib  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将库文件复制到系统库目录</span></span><br></pre></td></tr></table></figure><h4 id="MPICH"><a href="#MPICH" class="headerlink" title="MPICH"></a>MPICH</h4><p>到<a href="https://www.mpich.org/downloads/">MPICH官网</a>下载源码包，使用tar指令解压。进入mpich文件夹进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/home/software/mpich-4.0.3</span><br></pre></td></tr></table></figure><p>然后<code>make&amp;&amp;make install</code>完成安装。</p><p>记得编辑<code>.bashrc</code>以配置环境变量。可参考下方配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># mpich</span><br><span class="line"></span><br><span class="line">export MPI_HOME=/home/software/mpich-4.0.3</span><br><span class="line"></span><br><span class="line">export PATH=$MPI_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:$MPI_HOME/include</span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MPI_HOME/lib</span><br><span class="line"></span><br><span class="line">export MANPATN=$MANPATH:$MPI_HOME/man</span><br></pre></td></tr></table></figure><p>最后激活环境变量即可使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bashrc</span><br></pre></td></tr></table></figure><h4 id="HPL"><a href="#HPL" class="headerlink" title="HPL"></a>HPL</h4><p>于<a href="https://netlib.org/benchmark/hpl/">HPL官网</a>下载源码包，使用<code>tar</code>指令解压后进入其<code>setup</code>目录。</p><p>手写Make文件是一件痛苦的事情，好在这里有一些针对各种体系结构的编译设置实例。对于此实例，我们需要执行<code>make_generic</code>脚本以生成用于创建编译设置的模板。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd hpl-2.3/setup</span><br><span class="line">sh make_generic</span><br><span class="line">cp Make.UNKNOWN ..Make.linux</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>现在，我们需要修改<code>Make.linux</code>文件，以声明hpl2.3目录以及BLAS库的位置.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">97 LAlib= -lblas</span><br></pre></td></tr></table></figure><p>使用-L标志为编译器提供库位置，例如我的BLAS库安装在<code>/usr/local/lib</code>中，则将97行更改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">97 LAlib= -L/usr/local/lib -lblas</span><br></pre></td></tr></table></figure><p>另外在第70行指定<code>hpl-2.3</code>目录的位置，在64行将架构体系的名称从UNKNOWN改为linux</p><p>准备好<code>Make.linux</code>文件后，发出以下指令来编译HPL。</p><p><code>make arch=linux</code></p><p>这将在<code>bin/linux</code>目录里创建HPL的可执行文件xhpl。</p><h3 id="调试HPL参数文件"><a href="#调试HPL参数文件" class="headerlink" title="调试HPL参数文件"></a>调试HPL参数文件</h3><p>伴随<code>xhpl</code>可执行文件的是一个参数文件(HPL.dat)，用于调整HPL的计算参数。</p><p>下面给出一个示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">HPLinpack benchmark input file</span><br><span class="line">Innovative Computing Laboratory, University of Tennessee</span><br><span class="line">HPL.out      output file name (if any)</span><br><span class="line">6            device out (6=stdout,7=stderr,file)</span><br><span class="line">1            # of problems sizes (N)</span><br><span class="line">143360 256000 1000         Ns  </span><br><span class="line">1            # of NBs</span><br><span class="line">384 192 256      NBs </span><br><span class="line">1            PMAP process mapping (0=Row-,1=Column-major)</span><br><span class="line">1            # of process grids (P x Q)</span><br><span class="line">1 2          Ps  </span><br><span class="line">1 2          Qs  </span><br><span class="line">16.0         threshold</span><br><span class="line">1            # of panel fact</span><br><span class="line">2 1 0        PFACTs (0=left, 1=Crout, 2=Right)</span><br><span class="line">1            # of recursive stopping criterium</span><br><span class="line">2            NBMINs (&gt;= 1)</span><br><span class="line">1            # of panels in recursion</span><br><span class="line">2            NDIVs</span><br><span class="line">1            # of recursive panel fact.</span><br><span class="line">1 0 2        RFACTs (0=left, 1=Crout, 2=Right)</span><br><span class="line">1            # of broadcast</span><br><span class="line">0            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)</span><br><span class="line">1            # of lookahead depth</span><br><span class="line">0            DEPTHs (&gt;=0)</span><br><span class="line">0            SWAP (0=bin-exch,1=long,2=mix)</span><br><span class="line">1            swapping threshold</span><br><span class="line">1            L1 in (0=transposed,1=no-transposed) form</span><br><span class="line">1            U  in (0=transposed,1=no-transposed) form</span><br><span class="line">0            Equilibration (0=no,1=yes)</span><br><span class="line">8            memory alignment in double (&gt; 0)</span><br></pre></td></tr></table></figure><p>测试过程中您可以根据节点的硬件配置，调整HPL.dat文件中相关参数，参数的说明如下所示。</p><ul><li><p>第5~6行内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1            # of problems sizes (N)，N表示求解的矩阵数量与规模</span><br><span class="line">143360 256000 1000         Ns  </span><br></pre></td></tr></table></figure><p>N表示求解的矩阵数量与规模。矩阵规模N越大，有效计算所占的比例也越大，系统浮点处理性能也就越高。但矩阵规模越大会导致内存消耗量越多，如果系统实际内存空间不足，使用缓存、性能会大幅度降低。矩阵占用系统总内存的80%左右为最佳，即N×N×8&#x3D;系统总内存×80%（其中总内存的单位为字节）。</p></li><li><p>第7~8行内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1            # of NBs，NB表示求解矩阵过程中矩阵分块的大小</span><br><span class="line">384 192 256      NBs </span><br></pre></td></tr></table></figure><p>求解矩阵过程中矩阵分块的大小。分块大小对性能有很大的影响，NB的选择和软硬件许多因素密切相关。NB值的选择主要是通过实际测试得出最优值，一般遵循以下规律：</p><ul><li>NB不能太大或太小，一般小于384。</li><li>NB×8一定是缓存行的倍数。</li><li>NB的大小和通信方式、矩阵规模、网络、处理器速度等有关系。</li></ul><p>一般通过单节点或单CPU测试可以得到几个较好的NB值，但当系统规模增加、问题规模变大，有些NB取值所得性能会下降。因此建议在小规模测试时选择3个性能不错的NB值，再通过大规模测试检验这些选择。</p></li><li><p>第10~12行内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1            # of process grids (P x Q)，P表示水平方向处理器个数，Q表示垂直方向处理器个数</span><br><span class="line">1 2          Ps  </span><br><span class="line">1 2          Qs  </span><br></pre></td></tr></table></figure><p>P表示水平方向处理器个数，Q表示垂直方向处理器个数。P×Q表示二维处理器网格。P×Q&#x3D;系统CPU数&#x3D;进程数。一般情况下一个进程对应一个CPU，可以得到最佳性能。对于Intel ® Xeon ®，关闭超线程可以提高HPL性能。P和Q的取值一般遵循以下规律：</p><ul><li>P≤Q，一般情况下P的取值小于Q，因为列向通信量（通信次数和通信数据量）要远大于横向通信。</li><li>P建议选择2的幂。HPL中水平方向通信采用二元交换法（Binary Exchange），当水平方向处理器个数P为2的幂时性能最优。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自通用计算机时代开始以来，就出现了各种用于评估计算机性能的基准测试程序。这些程序的性质通常反映了构建计算机的预期目的，同时还提供了可以与制造商的理论性能估计进行比较的经验性能测量。&lt;/p&gt;
&lt;p&gt;高性能计算中最广泛使用的基准之一就是Linpack基准，它的起源是一个线性代数</summary>
      
    
    
    
    
    <category term="High Performance Computing" scheme="http://example.com/tags/High-Performance-Computing/"/>
    
  </entry>
  
  <entry>
    <title>记录镜像站遭遇SYN泛洪攻击的诊断与防御</title>
    <link href="http://example.com/2022/12/06/SYN/"/>
    <id>http://example.com/2022/12/06/SYN/</id>
    <published>2022-12-06T02:36:01.023Z</published>
    <updated>2022-12-24T09:39:26.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常的连接数"><a href="#异常的连接数" class="headerlink" title="异常的连接数"></a>异常的连接数</h2><p>近日，镜像站莫名遭到多次攻击，症状表现为TCP连接数异常上升，久久得不到释放。后台监控检测到大量5XX错误，CPU负载高，正常业务受到较大影响。</p><p>通过使用netstat命令可以统计服务器当前的各种TCP状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>我站在受攻击时的状态列表如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TIME_WAIT 168</span><br><span class="line">CLOSE_WAIT 9</span><br><span class="line">SYN_SENT 3</span><br><span class="line">FIN_WAIT1 229</span><br><span class="line">FIN_WAIT2 113</span><br><span class="line">ESTABLISHED 234</span><br><span class="line">SYN_RECV 1272</span><br><span class="line">CLOSING 3</span><br><span class="line">LAST_ACK 97</span><br></pre></td></tr></table></figure><p>可以明显发现SYN_RECV连接数异常增多。</p><p>仅通过这一现象就可以判断为服务器受到了SYN Flood泛洪攻击。</p><h2 id="SYN-Flood泛洪攻击"><a href="#SYN-Flood泛洪攻击" class="headerlink" title="SYN Flood泛洪攻击"></a>SYN Flood泛洪攻击</h2><h3 id="什么是SYN-Flood攻击"><a href="#什么是SYN-Flood攻击" class="headerlink" title="什么是SYN Flood攻击"></a>什么是SYN Flood攻击</h3><p>SYN 泛洪（半开连接攻击）是一种拒绝服务(DDoS)攻击，旨在耗尽可用服务器资源，致使服务器无法传输合法流量。攻击者通过重复发送初始连接请求 (SYN) 数据包，可击垮目标服务器计算机上的所有可用端口，导致目标设备在响应正常业务流量时表现迟钝乃至全无响应。</p><h3 id="SYN-Flood攻击的原理"><a href="#SYN-Flood攻击的原理" class="headerlink" title="SYN Flood攻击的原理"></a>SYN Flood攻击的原理</h3><p>SYN泛洪攻击，是利用TCP连接的握手过程中的缺陷实现的。</p><p>攻击者通过发送大量伪造的TCP连接请求，常用假冒的IP或IP号段发来海量的请求连接的第一个握手包（SYN包），被攻击服务器回应第二个握手包（SYN+ACK包），因为对方是假冒IP，对方永远收不到包且不会回应第三个握手包。导致被攻击服务器保持大量SYN_RECV状态的“半连接”，并且会重试默认5次回应第二个握手包，塞满TCP等待连接队列。</p><p><img src="https://www.cloudflare.com/img/learning/ddos/syn-flood-ddos-attack/syn-flood-attack-ddos-attack-diagram-2.png" alt="SYN Flood DDoS 攻击动画"></p><h3 id="防御SYN-Flood"><a href="#防御SYN-Flood" class="headerlink" title="防御SYN Flood"></a>防御SYN Flood</h3><h4 id="增大Nginx的并发限制"><a href="#增大Nginx的并发限制" class="headerlink" title="增大Nginx的并发限制"></a>增大Nginx的并发限制</h4><p>适度调整Nginx主配置文件中的<code> worker_rlimit_nofile</code> 和<code> worker_connections</code></p><p>可参考如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> root root;</span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">4</span>;</span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log logs/error.log notice;</span></span><br><span class="line"><span class="comment">#error_log logs/error.log info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid logs/nginx.pid;</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">        <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">        <span class="attribute">worker_connections</span> <span class="number">65535</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过<code>nginx -s reload</code>命令热重载Nginx配置文件</p><h4 id="调整系统TCP栈参数"><a href="#调整系统TCP栈参数" class="headerlink" title="调整系统TCP栈参数"></a>调整系统TCP栈参数</h4><p> 在sysctl配置文件中，调整如下参数可有效减轻SYN Flood攻击带来的损害。</p><ul><li><p><code>net.core.netdev_max_backlog</code></p><p>接受自网卡、但未被内核协议栈处理的报文队列长度</p></li><li><p><code>net.ipv4.tcp_max_syn_backlog</code></p><p>SYN_RCVD连接状态的最大个数</p></li><li><p><code>net.ipv4.tcp_abort_on_overflow</code></p><p>超出处理能力时，对新来的SYN直接回报RST，丢弃连接</p></li></ul><h4 id="增大linux的最大文件句柄数限制"><a href="#增大linux的最大文件句柄数限制" class="headerlink" title="增大linux的最大文件句柄数限制"></a>增大linux的最大文件句柄数限制</h4><p>使用<code> ulimit -n</code> 查看本系统的最大文件句柄数限制，默认是1024</p><p>可以通过修改<code> /etc/security/limts.conf</code>来改变该限制：</p><p>在文件的最后追加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 655360</span><br><span class="line">* hard nofile 655360</span><br></pre></td></tr></table></figure><p>最前面的<code>*</code>代表全局设置。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;异常的连接数&quot;&gt;&lt;a href=&quot;#异常的连接数&quot; class=&quot;headerlink&quot; title=&quot;异常的连接数&quot;&gt;&lt;/a&gt;异常的连接数&lt;/h2&gt;&lt;p&gt;近日，镜像站莫名遭到多次攻击，症状表现为TCP连接数异常上升，久久得不到释放。后台监控检测到大量5XX错误，</summary>
      
    
    
    
    
    <category term="Cyberspace Security" scheme="http://example.com/tags/Cyberspace-Security/"/>
    
  </entry>
  
</feed>
