{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover.jpg","path":"img/cover.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover.png","path":"img/cover.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/fa356abf001878e1f67524905db9f9f.png","path":"img/fa356abf001878e1f67524905db9f9f.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1670291387420},{"_id":"themes/butterfly/package.json","hash":"513295c02e8b78606be2c3993f5068c928189467","modified":1667146250000},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1667146250000},{"_id":"themes/butterfly/_config.yml","hash":"f202d7085620edccaf665696ed887f4efab00f54","modified":1670894851361},{"_id":"themes/butterfly/plugins.yml","hash":"d46811a3c50f7057681ac496de4beda107aa26b6","modified":1667146250000},{"_id":"themes/butterfly/languages/default.yml","hash":"1e37a3695d50e3e61d7c36e58a6dac872a4a56cd","modified":1667146250000},{"_id":"themes/butterfly/languages/en.yml","hash":"d1bb560698eb8b0079495b7b18b44facb610f9fd","modified":1667146250000},{"_id":"themes/butterfly/README.md","hash":"c34579d9d7239828ce7d8abc235521eaf4ea9e17","modified":1667146250000},{"_id":"themes/butterfly/README_CN.md","hash":"25cfdbaf9883095322259c4f49bd08f0a7cffa0e","modified":1667146250000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"28b6f0c39155651d747eb595e0a283bc97be2e09","modified":1667146250000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"947f794e862bb2813e36887f777bdb760f70a322","modified":1667146250000},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1667146250000},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1667146250000},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1667146250000},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1667146250000},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1667146250000},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"346b6b650b9dee4844f3be7865886002f82da24c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"919020d4cd7ae68694b2326edeed4328c7f933cd","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"7dee9b73acdec2a34d41a45119ebe8bb8650bf6c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"a3d1f417965ca20253c36f9e93429f3df6268856","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"acfe765fb2c607bff7198630dbfa53a888c36357","modified":1667146250000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b4940a5c73d3a5cd8bb5883e3041ecdd905a74e0","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1667146250000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"ee3e70098eb0849497d50b75e18cf4a27c397d52","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"d368a8830e506c8b5eb6512b709ec8db354d5ea1","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b4cd617c619d1a0df93603721a6fa1317526174b","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"763dab5c83f50c1c62fffc9a9dfedea29bb4e629","modified":1667146250000},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1667146250000},{"_id":"themes/butterfly/source/css/custom.css","hash":"cc78ede68c5928ed4caa6025dd53950280b5ee0f","modified":1670730755390},{"_id":"themes/butterfly/source/css/var.styl","hash":"e018dad9f674fc5564112b99032fe5fe8b2d195f","modified":1667146250000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1667146250000},{"_id":"themes/butterfly/source/js/main.js","hash":"189359400f6cd4d814ca9ebb5a27b96f7031bce3","modified":1667146250000},{"_id":"themes/butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1667146250000},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"2df5a033104775ee9c8715925bb32c3ec5b75da0","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"fe4d847177b824e09c75e9c7b723184c708c569a","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1667146250000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1667146250000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"aa175e2254704335f4da09175e59ef2375ca7d03","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"c4b86758f3a3deae4612c31d725814c8753a7804","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"278855fe4399489bdef0393697bb87420e671fe9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"6ae047d566289294cc2f6192cacbff297cec9f1a","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e3d574921fca8e756923bf3b303835e57b9a26b2","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"142621f70bedcb5033ee99a988f7bb6c5eea3493","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1667146250000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"644d520fe80cc82058467708ab82ccad313b0c27","modified":1667146250000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"a0010d833ed30211601c1e0bbbc68e85b77428c6","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"23db4e3cab68fed78601fc8a9c39ff5753bcc716","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"a457a0dbe23af21a7b6b8bfc5ee103c9fe92e89c","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"56389925671c7e8da0c033769421269e15e8f795","modified":1667146250000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"a92984f566c97bb4179f34be79240af1552c6f17","modified":1667146250000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"8c90483d461e09cb06e91b16d8bb7b3205b0a40c","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1667146250000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1667146250000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"51e45625929d57c9df3ba9090af99b9b7bb9a15b","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1667146250000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"25e58a7a8bda4b73d0a0e551643ca01b09ccd7e5","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1667146250000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"b2aadea7351fae8382b8c2a3b9de810d922b0ec1","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1667146250000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1667146250000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"5f648086a33a32d169a2f8d8c549c08aa02f67db","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"0611d9216f4c128ebdea4cc21454c3dc4a6398d5","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"ccb7d8ce3ded7364f9a15334b68ad73869fca757","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"49dcc23815e1d5264bb65c91e7dc67b1a723d1ea","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"eefdaa94956adc7a3ca90dd8edcd70a7574b439c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"98ef20f8a3b10c1692f9b2b3c06033d2da8a8eae","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"22e2ef30fe5eb1db7566e89943c74ece029b2a8e","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"c12c898b35dd014780c1f3220ddbe12e7270983c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"15462d1ed04651ad3b430c682842ac400f6f9b47","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"dd0bc119029b62dce5dc965d5de7377e438fa29a","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"1c846c8d51649b8554d91536323eaeb20c8fc236","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1667146250000},{"_id":"themes/butterfly/source/img/cover.jpg","hash":"2d5c1d879a3ac23235687a7a0f9428410f511058","modified":1670728356000},{"_id":"themes/butterfly/source/img/cover.png","hash":"ce5a8583e0fdc740b12ee86370024fcc74817991","modified":1670727410630},{"_id":"public/atom.xml","hash":"8a61017a67aebeb0818bb6b370a66bdec27323fb","modified":1671883267643},{"_id":"public/sitemap.xml","hash":"198967b257509215961b57db5c4cd176bafe4a55","modified":1671883267643},{"_id":"public/sitemap.txt","hash":"fa39e978f24a5234ae348c49e3c8eb0bca4f8c95","modified":1671883267643},{"_id":"public/archives/2022/12/index.html","hash":"85be8bc407e6d81efaf20d6a0b48857f6b4268cd","modified":1671891070056},{"_id":"public/index.html","hash":"07f5ef414f01c8ab2090c0c44a69724a720740d1","modified":1671891070056},{"_id":"public/archives/index.html","hash":"fcb6a5e67b70e27ab99c1f35760b247ee6ca02ad","modified":1671891070056},{"_id":"public/archives/2022/index.html","hash":"b6c5dbb7f4389f077e0602690774d66547d43be5","modified":1671891070056},{"_id":"public/2022/12/11/hello-world/index.html","hash":"f105a057d0bcad3d13bc4af13618b3338e9cdefc","modified":1670756318356},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1670756318356},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1670756318356},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1670756318356},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1670756318356},{"_id":"public/css/custom.css","hash":"72e2f45ac68fc1ab15ceb6fc9dcd6cb6ec921747","modified":1670756318356},{"_id":"public/css/index.css","hash":"6cdc246b0b9ff65a7a1754550a04e5bbf13798e6","modified":1670756318356},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1670756318356},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1670756318356},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1670756318356},{"_id":"public/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1670756318356},{"_id":"public/js/main.js","hash":"189359400f6cd4d814ca9ebb5a27b96f7031bce3","modified":1670756318356},{"_id":"public/img/cover.jpg","hash":"2d5c1d879a3ac23235687a7a0f9428410f511058","modified":1670756318356},{"_id":"public/img/cover.png","hash":"ce5a8583e0fdc740b12ee86370024fcc74817991","modified":1670756318356},{"_id":"source/_posts/HPL.md","hash":"2eebaeba1fcaa7389af91b249828d441c4005599","modified":1670894056822},{"_id":"public/2022/12/11/HPL/index.html","hash":"446ee4af8d111cc6eefa56ce9bd550375919d99b","modified":1671883267643},{"_id":"source/tags/index.md","hash":"94d0a8ac3397a40d774abce7d33a90c125c4f055","modified":1670893924874},{"_id":"public/tags/index.html","hash":"56b9f3bdb0989a9662a098a88876f48b8ae9add2","modified":1671891070056},{"_id":"public/tags/High-Performance-Computing/index.html","hash":"df22fc956079bc33ce96289f65856b5afd1739d8","modified":1671891070056},{"_id":"source/_posts/SYN.md","hash":"25903c284109a0c3afc671a39d8a73c8264a0c2a","modified":1671874766960},{"_id":"themes/butterfly/source/img/fa356abf001878e1f67524905db9f9f.png","hash":"b0d06e4289618a33a7a15fe86c8d4aced3193eaa","modified":1670924880856},{"_id":"public/tags/Cyberspace-Security/index.html","hash":"ade03fe4da3b5fcbecca37ac15dc661eab59bd81","modified":1671891070056},{"_id":"public/2022/12/06/SYN/index.html","hash":"469a1c0b990af61f7f2a95c6341774949aa0a4cf","modified":1671883267643},{"_id":"public/img/fa356abf001878e1f67524905db9f9f.png","hash":"b0d06e4289618a33a7a15fe86c8d4aced3193eaa","modified":1671874812574},{"_id":"source/_posts/QoS.md","hash":"cfd682a48a52688bf6dfd0beffd30d4a8e6a5afc","modified":1671883218193},{"_id":"public/tags/Computer-Network/index.html","hash":"ab852f5ee4dad1c5701f5a45e523c45abfa8ceff","modified":1671891070056},{"_id":"public/2022/12/24/QoS/index.html","hash":"c2633ef7c7a0a1db910611b6d123acbc2da74968","modified":1671883267643}],"Category":[],"Data":[],"Page":[{"title":"标签","date":"2022-12-13T00:21:48.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-12-13 8:21:48\ntype: \"tags\"\n---\n","updated":"2022-12-13T01:12:04.874Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clblj6mcm0000q4g7dgar4kqu","content":"","site":{"data":{}},"cover":"/img/cover.jpg","excerpt":"","more":""}],"Post":[{"title":"高性能计算-基准测试程序Linpack（HPL）","cover":"https://s2.loli.net/2022/12/12/SH7Yhl2dIbEpzcm.jpg","_content":"\n\n自通用计算机时代开始以来，就出现了各种用于评估计算机性能的基准测试程序。这些程序的性质通常反映了构建计算机的预期目的，同时还提供了可以与制造商的理论性能估计进行比较的经验性能测量。\n\n高性能计算中最广泛使用的基准之一就是Linpack基准，它的起源是一个线性代数运算包，后来被Lapack库和其他竞争对手取代。但Linpack的基准测试程序在以后的日子里继续发挥强大的影响力。\n\nHPL，即(High-Performance *Linpack*)是早期Linpack的衍生产品，其高度并行化的设计，使得它用于评估TOP500超级计算机的性能排名。\n\n## 编译安装HPL\n\n### 环境依赖\n\n在安装HPL之前，系统上需要安装好支持C语言和Fortran77语言的编译器，我个人选择使用gcc与gfortran ，我将用他们来安装BLAS、MPICH以及HPL本体。\n\n#### BLAS\n\n到[BLAS官网](http://www.netlib.org/blas/)下载好源码，使用tar指令解压。进入BLAS文件夹，执行编译指令：\n\n```shell\ngfortran -c -O3 *.f \n# 编译所有的 .f 文件，生成 .o文件\n \nar rv libblas.a *.o  \n# 链接所有的 .o文件，生成.a 文件\n \ncp libblas.a /usr/local/lib  \n#将库文件复制到系统库目录\n```\n\n#### MPICH\n\n到[MPICH官网](https://www.mpich.org/downloads/)下载源码包，使用tar指令解压。进入mpich文件夹进行配置：\n\n```\n./configure --prefix=/home/software/mpich-4.0.3\n```\n\n然后`make&&make install`完成安装。\n\n记得编辑`.bashrc`以配置环境变量。可参考下方配置：\n\n```\n# mpich\n\nexport MPI_HOME=/home/software/mpich-4.0.3\n\nexport PATH=$MPI_HOME/bin:$PATH\n\nexport PATH=$PATH:$MPI_HOME/include\n\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MPI_HOME/lib\n\nexport MANPATN=$MANPATH:$MPI_HOME/man\n```\n\n最后激活环境变量即可使用：\n\n```\nsource .bashrc\n```\n\n#### HPL\n\n于[HPL官网](https://netlib.org/benchmark/hpl/)下载源码包，使用`tar`指令解压后进入其`setup`目录。\n\n手写Make文件是一件痛苦的事情，好在这里有一些针对各种体系结构的编译设置实例。对于此实例，我们需要执行`make_generic`脚本以生成用于创建编译设置的模板。\n\n```\ncd hpl-2.3/setup\nsh make_generic\ncp Make.UNKNOWN ..Make.linux\ncd ..\n```\n\n现在，我们需要修改`Make.linux`文件，以声明hpl2.3目录以及BLAS库的位置.\n\n```\n97 LAlib\t= -lblas\n```\n\n使用-L标志为编译器提供库位置，例如我的BLAS库安装在`/usr/local/lib`中，则将97行更改为：\n\n```\n97 LAlib\t= -L/usr/local/lib -lblas\n```\n\n另外在第70行指定`hpl-2.3`目录的位置，在64行将架构体系的名称从UNKNOWN改为linux\n\n准备好`Make.linux`文件后，发出以下指令来编译HPL。\n\n`make arch=linux`\n\n这将在`bin/linux`目录里创建HPL的可执行文件xhpl。\n\n### 调试HPL参数文件\n\n伴随`xhpl`可执行文件的是一个参数文件(HPL.dat)，用于调整HPL的计算参数。\n\n下面给出一个示例：\n\n```\nHPLinpack benchmark input file\nInnovative Computing Laboratory, University of Tennessee\nHPL.out      output file name (if any)\n6            device out (6=stdout,7=stderr,file)\n1            # of problems sizes (N)\n143360 256000 1000         Ns  \n1            # of NBs\n384 192 256      NBs \n1            PMAP process mapping (0=Row-,1=Column-major)\n1            # of process grids (P x Q)\n1 2          Ps  \n1 2          Qs  \n16.0         threshold\n1            # of panel fact\n2 1 0        PFACTs (0=left, 1=Crout, 2=Right)\n1            # of recursive stopping criterium\n2            NBMINs (>= 1)\n1            # of panels in recursion\n2            NDIVs\n1            # of recursive panel fact.\n1 0 2        RFACTs (0=left, 1=Crout, 2=Right)\n1            # of broadcast\n0            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)\n1            # of lookahead depth\n0            DEPTHs (>=0)\n0            SWAP (0=bin-exch,1=long,2=mix)\n1            swapping threshold\n1            L1 in (0=transposed,1=no-transposed) form\n1            U  in (0=transposed,1=no-transposed) form\n0            Equilibration (0=no,1=yes)\n8            memory alignment in double (> 0)\n```\n\n测试过程中您可以根据节点的硬件配置，调整HPL.dat文件中相关参数，参数的说明如下所示。\n\n- 第5~6行内容。\n\n  ```shell\n  1            # of problems sizes (N)，N表示求解的矩阵数量与规模\n  143360 256000 1000         Ns  \n  ```\n\n  N表示求解的矩阵数量与规模。矩阵规模N越大，有效计算所占的比例也越大，系统浮点处理性能也就越高。但矩阵规模越大会导致内存消耗量越多，如果系统实际内存空间不足，使用缓存、性能会大幅度降低。矩阵占用系统总内存的80%左右为最佳，即N×N×8=系统总内存×80%（其中总内存的单位为字节）。\n\n- 第7~8行内容。\n\n  ```shell\n  1            # of NBs，NB表示求解矩阵过程中矩阵分块的大小\n  384 192 256      NBs \n  ```\n\n  求解矩阵过程中矩阵分块的大小。分块大小对性能有很大的影响，NB的选择和软硬件许多因素密切相关。NB值的选择主要是通过实际测试得出最优值，一般遵循以下规律：\n\n  - NB不能太大或太小，一般小于384。\n  - NB×8一定是缓存行的倍数。\n  - NB的大小和通信方式、矩阵规模、网络、处理器速度等有关系。\n\n  一般通过单节点或单CPU测试可以得到几个较好的NB值，但当系统规模增加、问题规模变大，有些NB取值所得性能会下降。因此建议在小规模测试时选择3个性能不错的NB值，再通过大规模测试检验这些选择。\n\n- 第10~12行内容。\n\n  ```shell\n  1            # of process grids (P x Q)，P表示水平方向处理器个数，Q表示垂直方向处理器个数\n  1 2          Ps  \n  1 2          Qs  \n  ```\n\n  P表示水平方向处理器个数，Q表示垂直方向处理器个数。P×Q表示二维处理器网格。P×Q=系统CPU数=进程数。一般情况下一个进程对应一个CPU，可以得到最佳性能。对于Intel ® Xeon ®，关闭超线程可以提高HPL性能。P和Q的取值一般遵循以下规律：\n\n  - P≤Q，一般情况下P的取值小于Q，因为列向通信量（通信次数和通信数据量）要远大于横向通信。\n  - P建议选择2的幂。HPL中水平方向通信采用二元交换法（Binary Exchange），当水平方向处理器个数P为2的幂时性能最优。\n","source":"_posts/HPL.md","raw":"---\ntitle: 高性能计算-基准测试程序Linpack（HPL）\ncover: https://s2.loli.net/2022/12/12/SH7Yhl2dIbEpzcm.jpg\ntags: High Performance Computing\n---\n\n\n自通用计算机时代开始以来，就出现了各种用于评估计算机性能的基准测试程序。这些程序的性质通常反映了构建计算机的预期目的，同时还提供了可以与制造商的理论性能估计进行比较的经验性能测量。\n\n高性能计算中最广泛使用的基准之一就是Linpack基准，它的起源是一个线性代数运算包，后来被Lapack库和其他竞争对手取代。但Linpack的基准测试程序在以后的日子里继续发挥强大的影响力。\n\nHPL，即(High-Performance *Linpack*)是早期Linpack的衍生产品，其高度并行化的设计，使得它用于评估TOP500超级计算机的性能排名。\n\n## 编译安装HPL\n\n### 环境依赖\n\n在安装HPL之前，系统上需要安装好支持C语言和Fortran77语言的编译器，我个人选择使用gcc与gfortran ，我将用他们来安装BLAS、MPICH以及HPL本体。\n\n#### BLAS\n\n到[BLAS官网](http://www.netlib.org/blas/)下载好源码，使用tar指令解压。进入BLAS文件夹，执行编译指令：\n\n```shell\ngfortran -c -O3 *.f \n# 编译所有的 .f 文件，生成 .o文件\n \nar rv libblas.a *.o  \n# 链接所有的 .o文件，生成.a 文件\n \ncp libblas.a /usr/local/lib  \n#将库文件复制到系统库目录\n```\n\n#### MPICH\n\n到[MPICH官网](https://www.mpich.org/downloads/)下载源码包，使用tar指令解压。进入mpich文件夹进行配置：\n\n```\n./configure --prefix=/home/software/mpich-4.0.3\n```\n\n然后`make&&make install`完成安装。\n\n记得编辑`.bashrc`以配置环境变量。可参考下方配置：\n\n```\n# mpich\n\nexport MPI_HOME=/home/software/mpich-4.0.3\n\nexport PATH=$MPI_HOME/bin:$PATH\n\nexport PATH=$PATH:$MPI_HOME/include\n\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MPI_HOME/lib\n\nexport MANPATN=$MANPATH:$MPI_HOME/man\n```\n\n最后激活环境变量即可使用：\n\n```\nsource .bashrc\n```\n\n#### HPL\n\n于[HPL官网](https://netlib.org/benchmark/hpl/)下载源码包，使用`tar`指令解压后进入其`setup`目录。\n\n手写Make文件是一件痛苦的事情，好在这里有一些针对各种体系结构的编译设置实例。对于此实例，我们需要执行`make_generic`脚本以生成用于创建编译设置的模板。\n\n```\ncd hpl-2.3/setup\nsh make_generic\ncp Make.UNKNOWN ..Make.linux\ncd ..\n```\n\n现在，我们需要修改`Make.linux`文件，以声明hpl2.3目录以及BLAS库的位置.\n\n```\n97 LAlib\t= -lblas\n```\n\n使用-L标志为编译器提供库位置，例如我的BLAS库安装在`/usr/local/lib`中，则将97行更改为：\n\n```\n97 LAlib\t= -L/usr/local/lib -lblas\n```\n\n另外在第70行指定`hpl-2.3`目录的位置，在64行将架构体系的名称从UNKNOWN改为linux\n\n准备好`Make.linux`文件后，发出以下指令来编译HPL。\n\n`make arch=linux`\n\n这将在`bin/linux`目录里创建HPL的可执行文件xhpl。\n\n### 调试HPL参数文件\n\n伴随`xhpl`可执行文件的是一个参数文件(HPL.dat)，用于调整HPL的计算参数。\n\n下面给出一个示例：\n\n```\nHPLinpack benchmark input file\nInnovative Computing Laboratory, University of Tennessee\nHPL.out      output file name (if any)\n6            device out (6=stdout,7=stderr,file)\n1            # of problems sizes (N)\n143360 256000 1000         Ns  \n1            # of NBs\n384 192 256      NBs \n1            PMAP process mapping (0=Row-,1=Column-major)\n1            # of process grids (P x Q)\n1 2          Ps  \n1 2          Qs  \n16.0         threshold\n1            # of panel fact\n2 1 0        PFACTs (0=left, 1=Crout, 2=Right)\n1            # of recursive stopping criterium\n2            NBMINs (>= 1)\n1            # of panels in recursion\n2            NDIVs\n1            # of recursive panel fact.\n1 0 2        RFACTs (0=left, 1=Crout, 2=Right)\n1            # of broadcast\n0            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)\n1            # of lookahead depth\n0            DEPTHs (>=0)\n0            SWAP (0=bin-exch,1=long,2=mix)\n1            swapping threshold\n1            L1 in (0=transposed,1=no-transposed) form\n1            U  in (0=transposed,1=no-transposed) form\n0            Equilibration (0=no,1=yes)\n8            memory alignment in double (> 0)\n```\n\n测试过程中您可以根据节点的硬件配置，调整HPL.dat文件中相关参数，参数的说明如下所示。\n\n- 第5~6行内容。\n\n  ```shell\n  1            # of problems sizes (N)，N表示求解的矩阵数量与规模\n  143360 256000 1000         Ns  \n  ```\n\n  N表示求解的矩阵数量与规模。矩阵规模N越大，有效计算所占的比例也越大，系统浮点处理性能也就越高。但矩阵规模越大会导致内存消耗量越多，如果系统实际内存空间不足，使用缓存、性能会大幅度降低。矩阵占用系统总内存的80%左右为最佳，即N×N×8=系统总内存×80%（其中总内存的单位为字节）。\n\n- 第7~8行内容。\n\n  ```shell\n  1            # of NBs，NB表示求解矩阵过程中矩阵分块的大小\n  384 192 256      NBs \n  ```\n\n  求解矩阵过程中矩阵分块的大小。分块大小对性能有很大的影响，NB的选择和软硬件许多因素密切相关。NB值的选择主要是通过实际测试得出最优值，一般遵循以下规律：\n\n  - NB不能太大或太小，一般小于384。\n  - NB×8一定是缓存行的倍数。\n  - NB的大小和通信方式、矩阵规模、网络、处理器速度等有关系。\n\n  一般通过单节点或单CPU测试可以得到几个较好的NB值，但当系统规模增加、问题规模变大，有些NB取值所得性能会下降。因此建议在小规模测试时选择3个性能不错的NB值，再通过大规模测试检验这些选择。\n\n- 第10~12行内容。\n\n  ```shell\n  1            # of process grids (P x Q)，P表示水平方向处理器个数，Q表示垂直方向处理器个数\n  1 2          Ps  \n  1 2          Qs  \n  ```\n\n  P表示水平方向处理器个数，Q表示垂直方向处理器个数。P×Q表示二维处理器网格。P×Q=系统CPU数=进程数。一般情况下一个进程对应一个CPU，可以得到最佳性能。对于Intel ® Xeon ®，关闭超线程可以提高HPL性能。P和Q的取值一般遵循以下规律：\n\n  - P≤Q，一般情况下P的取值小于Q，因为列向通信量（通信次数和通信数据量）要远大于横向通信。\n  - P建议选择2的幂。HPL中水平方向通信采用二元交换法（Binary Exchange），当水平方向处理器个数P为2的幂时性能最优。\n","slug":"HPL","published":1,"date":"2022-12-11T02:48:16.705Z","updated":"2022-12-13T01:14:16.822Z","_id":"clblitu7p0000hwg7asxs7inf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>自通用计算机时代开始以来，就出现了各种用于评估计算机性能的基准测试程序。这些程序的性质通常反映了构建计算机的预期目的，同时还提供了可以与制造商的理论性能估计进行比较的经验性能测量。</p>\n<p>高性能计算中最广泛使用的基准之一就是Linpack基准，它的起源是一个线性代数运算包，后来被Lapack库和其他竞争对手取代。但Linpack的基准测试程序在以后的日子里继续发挥强大的影响力。</p>\n<p>HPL，即(High-Performance <em>Linpack</em>)是早期Linpack的衍生产品，其高度并行化的设计，使得它用于评估TOP500超级计算机的性能排名。</p>\n<h2 id=\"编译安装HPL\"><a href=\"#编译安装HPL\" class=\"headerlink\" title=\"编译安装HPL\"></a>编译安装HPL</h2><h3 id=\"环境依赖\"><a href=\"#环境依赖\" class=\"headerlink\" title=\"环境依赖\"></a>环境依赖</h3><p>在安装HPL之前，系统上需要安装好支持C语言和Fortran77语言的编译器，我个人选择使用gcc与gfortran ，我将用他们来安装BLAS、MPICH以及HPL本体。</p>\n<h4 id=\"BLAS\"><a href=\"#BLAS\" class=\"headerlink\" title=\"BLAS\"></a>BLAS</h4><p>到<a href=\"http://www.netlib.org/blas/\">BLAS官网</a>下载好源码，使用tar指令解压。进入BLAS文件夹，执行编译指令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gfortran -c -O3 *.f </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译所有的 .f 文件，生成 .o文件</span></span><br><span class=\"line\"> </span><br><span class=\"line\">ar rv libblas.a *.o  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">链接所有的 .o文件，生成.a 文件</span></span><br><span class=\"line\"> </span><br><span class=\"line\">cp libblas.a /usr/local/lib  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将库文件复制到系统库目录</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MPICH\"><a href=\"#MPICH\" class=\"headerlink\" title=\"MPICH\"></a>MPICH</h4><p>到<a href=\"https://www.mpich.org/downloads/\">MPICH官网</a>下载源码包，使用tar指令解压。进入mpich文件夹进行配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/home/software/mpich-4.0.3</span><br></pre></td></tr></table></figure>\n\n<p>然后<code>make&amp;&amp;make install</code>完成安装。</p>\n<p>记得编辑<code>.bashrc</code>以配置环境变量。可参考下方配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mpich</span><br><span class=\"line\"></span><br><span class=\"line\">export MPI_HOME=/home/software/mpich-4.0.3</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$MPI_HOME/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$PATH:$MPI_HOME/include</span><br><span class=\"line\"></span><br><span class=\"line\">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MPI_HOME/lib</span><br><span class=\"line\"></span><br><span class=\"line\">export MANPATN=$MANPATH:$MPI_HOME/man</span><br></pre></td></tr></table></figure>\n\n<p>最后激活环境变量即可使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HPL\"><a href=\"#HPL\" class=\"headerlink\" title=\"HPL\"></a>HPL</h4><p>于<a href=\"https://netlib.org/benchmark/hpl/\">HPL官网</a>下载源码包，使用<code>tar</code>指令解压后进入其<code>setup</code>目录。</p>\n<p>手写Make文件是一件痛苦的事情，好在这里有一些针对各种体系结构的编译设置实例。对于此实例，我们需要执行<code>make_generic</code>脚本以生成用于创建编译设置的模板。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd hpl-2.3/setup</span><br><span class=\"line\">sh make_generic</span><br><span class=\"line\">cp Make.UNKNOWN ..Make.linux</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们需要修改<code>Make.linux</code>文件，以声明hpl2.3目录以及BLAS库的位置.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">97 LAlib\t= -lblas</span><br></pre></td></tr></table></figure>\n\n<p>使用-L标志为编译器提供库位置，例如我的BLAS库安装在<code>/usr/local/lib</code>中，则将97行更改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">97 LAlib\t= -L/usr/local/lib -lblas</span><br></pre></td></tr></table></figure>\n\n<p>另外在第70行指定<code>hpl-2.3</code>目录的位置，在64行将架构体系的名称从UNKNOWN改为linux</p>\n<p>准备好<code>Make.linux</code>文件后，发出以下指令来编译HPL。</p>\n<p><code>make arch=linux</code></p>\n<p>这将在<code>bin/linux</code>目录里创建HPL的可执行文件xhpl。</p>\n<h3 id=\"调试HPL参数文件\"><a href=\"#调试HPL参数文件\" class=\"headerlink\" title=\"调试HPL参数文件\"></a>调试HPL参数文件</h3><p>伴随<code>xhpl</code>可执行文件的是一个参数文件(HPL.dat)，用于调整HPL的计算参数。</p>\n<p>下面给出一个示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HPLinpack benchmark input file</span><br><span class=\"line\">Innovative Computing Laboratory, University of Tennessee</span><br><span class=\"line\">HPL.out      output file name (if any)</span><br><span class=\"line\">6            device out (6=stdout,7=stderr,file)</span><br><span class=\"line\">1            # of problems sizes (N)</span><br><span class=\"line\">143360 256000 1000         Ns  </span><br><span class=\"line\">1            # of NBs</span><br><span class=\"line\">384 192 256      NBs </span><br><span class=\"line\">1            PMAP process mapping (0=Row-,1=Column-major)</span><br><span class=\"line\">1            # of process grids (P x Q)</span><br><span class=\"line\">1 2          Ps  </span><br><span class=\"line\">1 2          Qs  </span><br><span class=\"line\">16.0         threshold</span><br><span class=\"line\">1            # of panel fact</span><br><span class=\"line\">2 1 0        PFACTs (0=left, 1=Crout, 2=Right)</span><br><span class=\"line\">1            # of recursive stopping criterium</span><br><span class=\"line\">2            NBMINs (&gt;= 1)</span><br><span class=\"line\">1            # of panels in recursion</span><br><span class=\"line\">2            NDIVs</span><br><span class=\"line\">1            # of recursive panel fact.</span><br><span class=\"line\">1 0 2        RFACTs (0=left, 1=Crout, 2=Right)</span><br><span class=\"line\">1            # of broadcast</span><br><span class=\"line\">0            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)</span><br><span class=\"line\">1            # of lookahead depth</span><br><span class=\"line\">0            DEPTHs (&gt;=0)</span><br><span class=\"line\">0            SWAP (0=bin-exch,1=long,2=mix)</span><br><span class=\"line\">1            swapping threshold</span><br><span class=\"line\">1            L1 in (0=transposed,1=no-transposed) form</span><br><span class=\"line\">1            U  in (0=transposed,1=no-transposed) form</span><br><span class=\"line\">0            Equilibration (0=no,1=yes)</span><br><span class=\"line\">8            memory alignment in double (&gt; 0)</span><br></pre></td></tr></table></figure>\n\n<p>测试过程中您可以根据节点的硬件配置，调整HPL.dat文件中相关参数，参数的说明如下所示。</p>\n<ul>\n<li><p>第5~6行内容。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1            # of problems sizes (N)，N表示求解的矩阵数量与规模</span><br><span class=\"line\">143360 256000 1000         Ns  </span><br></pre></td></tr></table></figure>\n\n<p>N表示求解的矩阵数量与规模。矩阵规模N越大，有效计算所占的比例也越大，系统浮点处理性能也就越高。但矩阵规模越大会导致内存消耗量越多，如果系统实际内存空间不足，使用缓存、性能会大幅度降低。矩阵占用系统总内存的80%左右为最佳，即N×N×8&#x3D;系统总内存×80%（其中总内存的单位为字节）。</p>\n</li>\n<li><p>第7~8行内容。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1            # of NBs，NB表示求解矩阵过程中矩阵分块的大小</span><br><span class=\"line\">384 192 256      NBs </span><br></pre></td></tr></table></figure>\n\n<p>求解矩阵过程中矩阵分块的大小。分块大小对性能有很大的影响，NB的选择和软硬件许多因素密切相关。NB值的选择主要是通过实际测试得出最优值，一般遵循以下规律：</p>\n<ul>\n<li>NB不能太大或太小，一般小于384。</li>\n<li>NB×8一定是缓存行的倍数。</li>\n<li>NB的大小和通信方式、矩阵规模、网络、处理器速度等有关系。</li>\n</ul>\n<p>一般通过单节点或单CPU测试可以得到几个较好的NB值，但当系统规模增加、问题规模变大，有些NB取值所得性能会下降。因此建议在小规模测试时选择3个性能不错的NB值，再通过大规模测试检验这些选择。</p>\n</li>\n<li><p>第10~12行内容。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1            # of process grids (P x Q)，P表示水平方向处理器个数，Q表示垂直方向处理器个数</span><br><span class=\"line\">1 2          Ps  </span><br><span class=\"line\">1 2          Qs  </span><br></pre></td></tr></table></figure>\n\n<p>P表示水平方向处理器个数，Q表示垂直方向处理器个数。P×Q表示二维处理器网格。P×Q&#x3D;系统CPU数&#x3D;进程数。一般情况下一个进程对应一个CPU，可以得到最佳性能。对于Intel ® Xeon ®，关闭超线程可以提高HPL性能。P和Q的取值一般遵循以下规律：</p>\n<ul>\n<li>P≤Q，一般情况下P的取值小于Q，因为列向通信量（通信次数和通信数据量）要远大于横向通信。</li>\n<li>P建议选择2的幂。HPL中水平方向通信采用二元交换法（Binary Exchange），当水平方向处理器个数P为2的幂时性能最优。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>自通用计算机时代开始以来，就出现了各种用于评估计算机性能的基准测试程序。这些程序的性质通常反映了构建计算机的预期目的，同时还提供了可以与制造商的理论性能估计进行比较的经验性能测量。</p>\n<p>高性能计算中最广泛使用的基准之一就是Linpack基准，它的起源是一个线性代数运算包，后来被Lapack库和其他竞争对手取代。但Linpack的基准测试程序在以后的日子里继续发挥强大的影响力。</p>\n<p>HPL，即(High-Performance <em>Linpack</em>)是早期Linpack的衍生产品，其高度并行化的设计，使得它用于评估TOP500超级计算机的性能排名。</p>\n<h2 id=\"编译安装HPL\"><a href=\"#编译安装HPL\" class=\"headerlink\" title=\"编译安装HPL\"></a>编译安装HPL</h2><h3 id=\"环境依赖\"><a href=\"#环境依赖\" class=\"headerlink\" title=\"环境依赖\"></a>环境依赖</h3><p>在安装HPL之前，系统上需要安装好支持C语言和Fortran77语言的编译器，我个人选择使用gcc与gfortran ，我将用他们来安装BLAS、MPICH以及HPL本体。</p>\n<h4 id=\"BLAS\"><a href=\"#BLAS\" class=\"headerlink\" title=\"BLAS\"></a>BLAS</h4><p>到<a href=\"http://www.netlib.org/blas/\">BLAS官网</a>下载好源码，使用tar指令解压。进入BLAS文件夹，执行编译指令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gfortran -c -O3 *.f </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译所有的 .f 文件，生成 .o文件</span></span><br><span class=\"line\"> </span><br><span class=\"line\">ar rv libblas.a *.o  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">链接所有的 .o文件，生成.a 文件</span></span><br><span class=\"line\"> </span><br><span class=\"line\">cp libblas.a /usr/local/lib  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将库文件复制到系统库目录</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MPICH\"><a href=\"#MPICH\" class=\"headerlink\" title=\"MPICH\"></a>MPICH</h4><p>到<a href=\"https://www.mpich.org/downloads/\">MPICH官网</a>下载源码包，使用tar指令解压。进入mpich文件夹进行配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/home/software/mpich-4.0.3</span><br></pre></td></tr></table></figure>\n\n<p>然后<code>make&amp;&amp;make install</code>完成安装。</p>\n<p>记得编辑<code>.bashrc</code>以配置环境变量。可参考下方配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mpich</span><br><span class=\"line\"></span><br><span class=\"line\">export MPI_HOME=/home/software/mpich-4.0.3</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$MPI_HOME/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$PATH:$MPI_HOME/include</span><br><span class=\"line\"></span><br><span class=\"line\">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MPI_HOME/lib</span><br><span class=\"line\"></span><br><span class=\"line\">export MANPATN=$MANPATH:$MPI_HOME/man</span><br></pre></td></tr></table></figure>\n\n<p>最后激活环境变量即可使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HPL\"><a href=\"#HPL\" class=\"headerlink\" title=\"HPL\"></a>HPL</h4><p>于<a href=\"https://netlib.org/benchmark/hpl/\">HPL官网</a>下载源码包，使用<code>tar</code>指令解压后进入其<code>setup</code>目录。</p>\n<p>手写Make文件是一件痛苦的事情，好在这里有一些针对各种体系结构的编译设置实例。对于此实例，我们需要执行<code>make_generic</code>脚本以生成用于创建编译设置的模板。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd hpl-2.3/setup</span><br><span class=\"line\">sh make_generic</span><br><span class=\"line\">cp Make.UNKNOWN ..Make.linux</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们需要修改<code>Make.linux</code>文件，以声明hpl2.3目录以及BLAS库的位置.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">97 LAlib\t= -lblas</span><br></pre></td></tr></table></figure>\n\n<p>使用-L标志为编译器提供库位置，例如我的BLAS库安装在<code>/usr/local/lib</code>中，则将97行更改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">97 LAlib\t= -L/usr/local/lib -lblas</span><br></pre></td></tr></table></figure>\n\n<p>另外在第70行指定<code>hpl-2.3</code>目录的位置，在64行将架构体系的名称从UNKNOWN改为linux</p>\n<p>准备好<code>Make.linux</code>文件后，发出以下指令来编译HPL。</p>\n<p><code>make arch=linux</code></p>\n<p>这将在<code>bin/linux</code>目录里创建HPL的可执行文件xhpl。</p>\n<h3 id=\"调试HPL参数文件\"><a href=\"#调试HPL参数文件\" class=\"headerlink\" title=\"调试HPL参数文件\"></a>调试HPL参数文件</h3><p>伴随<code>xhpl</code>可执行文件的是一个参数文件(HPL.dat)，用于调整HPL的计算参数。</p>\n<p>下面给出一个示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HPLinpack benchmark input file</span><br><span class=\"line\">Innovative Computing Laboratory, University of Tennessee</span><br><span class=\"line\">HPL.out      output file name (if any)</span><br><span class=\"line\">6            device out (6=stdout,7=stderr,file)</span><br><span class=\"line\">1            # of problems sizes (N)</span><br><span class=\"line\">143360 256000 1000         Ns  </span><br><span class=\"line\">1            # of NBs</span><br><span class=\"line\">384 192 256      NBs </span><br><span class=\"line\">1            PMAP process mapping (0=Row-,1=Column-major)</span><br><span class=\"line\">1            # of process grids (P x Q)</span><br><span class=\"line\">1 2          Ps  </span><br><span class=\"line\">1 2          Qs  </span><br><span class=\"line\">16.0         threshold</span><br><span class=\"line\">1            # of panel fact</span><br><span class=\"line\">2 1 0        PFACTs (0=left, 1=Crout, 2=Right)</span><br><span class=\"line\">1            # of recursive stopping criterium</span><br><span class=\"line\">2            NBMINs (&gt;= 1)</span><br><span class=\"line\">1            # of panels in recursion</span><br><span class=\"line\">2            NDIVs</span><br><span class=\"line\">1            # of recursive panel fact.</span><br><span class=\"line\">1 0 2        RFACTs (0=left, 1=Crout, 2=Right)</span><br><span class=\"line\">1            # of broadcast</span><br><span class=\"line\">0            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)</span><br><span class=\"line\">1            # of lookahead depth</span><br><span class=\"line\">0            DEPTHs (&gt;=0)</span><br><span class=\"line\">0            SWAP (0=bin-exch,1=long,2=mix)</span><br><span class=\"line\">1            swapping threshold</span><br><span class=\"line\">1            L1 in (0=transposed,1=no-transposed) form</span><br><span class=\"line\">1            U  in (0=transposed,1=no-transposed) form</span><br><span class=\"line\">0            Equilibration (0=no,1=yes)</span><br><span class=\"line\">8            memory alignment in double (&gt; 0)</span><br></pre></td></tr></table></figure>\n\n<p>测试过程中您可以根据节点的硬件配置，调整HPL.dat文件中相关参数，参数的说明如下所示。</p>\n<ul>\n<li><p>第5~6行内容。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1            # of problems sizes (N)，N表示求解的矩阵数量与规模</span><br><span class=\"line\">143360 256000 1000         Ns  </span><br></pre></td></tr></table></figure>\n\n<p>N表示求解的矩阵数量与规模。矩阵规模N越大，有效计算所占的比例也越大，系统浮点处理性能也就越高。但矩阵规模越大会导致内存消耗量越多，如果系统实际内存空间不足，使用缓存、性能会大幅度降低。矩阵占用系统总内存的80%左右为最佳，即N×N×8&#x3D;系统总内存×80%（其中总内存的单位为字节）。</p>\n</li>\n<li><p>第7~8行内容。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1            # of NBs，NB表示求解矩阵过程中矩阵分块的大小</span><br><span class=\"line\">384 192 256      NBs </span><br></pre></td></tr></table></figure>\n\n<p>求解矩阵过程中矩阵分块的大小。分块大小对性能有很大的影响，NB的选择和软硬件许多因素密切相关。NB值的选择主要是通过实际测试得出最优值，一般遵循以下规律：</p>\n<ul>\n<li>NB不能太大或太小，一般小于384。</li>\n<li>NB×8一定是缓存行的倍数。</li>\n<li>NB的大小和通信方式、矩阵规模、网络、处理器速度等有关系。</li>\n</ul>\n<p>一般通过单节点或单CPU测试可以得到几个较好的NB值，但当系统规模增加、问题规模变大，有些NB取值所得性能会下降。因此建议在小规模测试时选择3个性能不错的NB值，再通过大规模测试检验这些选择。</p>\n</li>\n<li><p>第10~12行内容。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1            # of process grids (P x Q)，P表示水平方向处理器个数，Q表示垂直方向处理器个数</span><br><span class=\"line\">1 2          Ps  </span><br><span class=\"line\">1 2          Qs  </span><br></pre></td></tr></table></figure>\n\n<p>P表示水平方向处理器个数，Q表示垂直方向处理器个数。P×Q表示二维处理器网格。P×Q&#x3D;系统CPU数&#x3D;进程数。一般情况下一个进程对应一个CPU，可以得到最佳性能。对于Intel ® Xeon ®，关闭超线程可以提高HPL性能。P和Q的取值一般遵循以下规律：</p>\n<ul>\n<li>P≤Q，一般情况下P的取值小于Q，因为列向通信量（通信次数和通信数据量）要远大于横向通信。</li>\n<li>P建议选择2的幂。HPL中水平方向通信采用二元交换法（Binary Exchange），当水平方向处理器个数P为2的幂时性能最优。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"记录镜像站遭遇SYN泛洪攻击的诊断与防御","_content":"\n## 异常的连接数\n\n近日，镜像站莫名遭到多次攻击，症状表现为TCP连接数异常上升，久久得不到释放。后台监控检测到大量5XX错误，CPU负载高，正常业务受到较大影响。\n\n通过使用netstat命令可以统计服务器当前的各种TCP状态：\n\n```shell\nnetstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'\n```\n\n我站在受攻击时的状态列表如下：\n\n```shell\nTIME_WAIT 168\nCLOSE_WAIT 9\nSYN_SENT 3\nFIN_WAIT1 229\nFIN_WAIT2 113\nESTABLISHED 234\nSYN_RECV 1272\nCLOSING 3\nLAST_ACK 97\n```\n\n可以明显发现SYN_RECV连接数异常增多。\n\n仅通过这一现象就可以判断为服务器受到了SYN Flood泛洪攻击。\n\n## SYN Flood泛洪攻击\n\n### 什么是SYN Flood攻击\n\nSYN 泛洪（半开连接攻击）是一种拒绝服务(DDoS)攻击，旨在耗尽可用服务器资源，致使服务器无法传输合法流量。攻击者通过重复发送初始连接请求 (SYN) 数据包，可击垮目标服务器计算机上的所有可用端口，导致目标设备在响应正常业务流量时表现迟钝乃至全无响应。\n\n### SYN Flood攻击的原理\n\nSYN泛洪攻击，是利用TCP连接的握手过程中的缺陷实现的。\n\n攻击者通过发送大量伪造的TCP连接请求，常用假冒的IP或IP号段发来海量的请求连接的第一个握手包（SYN包），被攻击服务器回应第二个握手包（SYN+ACK包），因为对方是假冒IP，对方永远收不到包且不会回应第三个握手包。导致被攻击服务器保持大量SYN_RECV状态的“半连接”，并且会重试默认5次回应第二个握手包，塞满TCP等待连接队列。\n\n![SYN Flood DDoS 攻击动画](https://www.cloudflare.com/img/learning/ddos/syn-flood-ddos-attack/syn-flood-attack-ddos-attack-diagram-2.png)\n\n### 防御SYN Flood\n\n#### 增大Nginx的并发限制\n\n适度调整Nginx主配置文件中的` worker_rlimit_nofile` 和` worker_connections`\n\n可参考如下配置：\n\n```nginx\nuser root root;\nworker_processes 4;\nworker_rlimit_nofile 65535;\n\n#error_log logs/error.log;\n#error_log logs/error.log notice;\n#error_log logs/error.log info;\n\n#pid logs/nginx.pid;\nevents {\n        use epoll;\n        worker_connections 65535;\n}\n```\n\n然后通过`nginx -s reload`命令热重载Nginx配置文件\n\n#### 调整系统TCP栈参数\n\n 在sysctl配置文件中，调整如下参数可有效减轻SYN Flood攻击带来的损害。\n\n- `net.core.netdev_max_backlog`\n\n  接受自网卡、但未被内核协议栈处理的报文队列长度\n\n- `net.ipv4.tcp_max_syn_backlog`\n\n  SYN_RCVD连接状态的最大个数\n\n- `net.ipv4.tcp_abort_on_overflow`\n\n  超出处理能力时，对新来的SYN直接回报RST，丢弃连接\n\n#### 增大linux的最大文件句柄数限制\n\n使用` ulimit -n` 查看本系统的最大文件句柄数限制，默认是1024\n\n可以通过修改` /etc/security/limts.conf`来改变该限制：\n\n在文件的最后追加：\n\n```\n* soft nofile 655360\n* hard nofile 655360\n```\n\n最前面的`*`代表全局设置。\n\n","source":"_posts/SYN.md","raw":"---\ntitle: 记录镜像站遭遇SYN泛洪攻击的诊断与防御\ntags: Cyberspace Security\n---\n\n## 异常的连接数\n\n近日，镜像站莫名遭到多次攻击，症状表现为TCP连接数异常上升，久久得不到释放。后台监控检测到大量5XX错误，CPU负载高，正常业务受到较大影响。\n\n通过使用netstat命令可以统计服务器当前的各种TCP状态：\n\n```shell\nnetstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'\n```\n\n我站在受攻击时的状态列表如下：\n\n```shell\nTIME_WAIT 168\nCLOSE_WAIT 9\nSYN_SENT 3\nFIN_WAIT1 229\nFIN_WAIT2 113\nESTABLISHED 234\nSYN_RECV 1272\nCLOSING 3\nLAST_ACK 97\n```\n\n可以明显发现SYN_RECV连接数异常增多。\n\n仅通过这一现象就可以判断为服务器受到了SYN Flood泛洪攻击。\n\n## SYN Flood泛洪攻击\n\n### 什么是SYN Flood攻击\n\nSYN 泛洪（半开连接攻击）是一种拒绝服务(DDoS)攻击，旨在耗尽可用服务器资源，致使服务器无法传输合法流量。攻击者通过重复发送初始连接请求 (SYN) 数据包，可击垮目标服务器计算机上的所有可用端口，导致目标设备在响应正常业务流量时表现迟钝乃至全无响应。\n\n### SYN Flood攻击的原理\n\nSYN泛洪攻击，是利用TCP连接的握手过程中的缺陷实现的。\n\n攻击者通过发送大量伪造的TCP连接请求，常用假冒的IP或IP号段发来海量的请求连接的第一个握手包（SYN包），被攻击服务器回应第二个握手包（SYN+ACK包），因为对方是假冒IP，对方永远收不到包且不会回应第三个握手包。导致被攻击服务器保持大量SYN_RECV状态的“半连接”，并且会重试默认5次回应第二个握手包，塞满TCP等待连接队列。\n\n![SYN Flood DDoS 攻击动画](https://www.cloudflare.com/img/learning/ddos/syn-flood-ddos-attack/syn-flood-attack-ddos-attack-diagram-2.png)\n\n### 防御SYN Flood\n\n#### 增大Nginx的并发限制\n\n适度调整Nginx主配置文件中的` worker_rlimit_nofile` 和` worker_connections`\n\n可参考如下配置：\n\n```nginx\nuser root root;\nworker_processes 4;\nworker_rlimit_nofile 65535;\n\n#error_log logs/error.log;\n#error_log logs/error.log notice;\n#error_log logs/error.log info;\n\n#pid logs/nginx.pid;\nevents {\n        use epoll;\n        worker_connections 65535;\n}\n```\n\n然后通过`nginx -s reload`命令热重载Nginx配置文件\n\n#### 调整系统TCP栈参数\n\n 在sysctl配置文件中，调整如下参数可有效减轻SYN Flood攻击带来的损害。\n\n- `net.core.netdev_max_backlog`\n\n  接受自网卡、但未被内核协议栈处理的报文队列长度\n\n- `net.ipv4.tcp_max_syn_backlog`\n\n  SYN_RCVD连接状态的最大个数\n\n- `net.ipv4.tcp_abort_on_overflow`\n\n  超出处理能力时，对新来的SYN直接回报RST，丢弃连接\n\n#### 增大linux的最大文件句柄数限制\n\n使用` ulimit -n` 查看本系统的最大文件句柄数限制，默认是1024\n\n可以通过修改` /etc/security/limts.conf`来改变该限制：\n\n在文件的最后追加：\n\n```\n* soft nofile 655360\n* hard nofile 655360\n```\n\n最前面的`*`代表全局设置。\n\n","slug":"SYN","published":1,"date":"2022-12-06T02:36:01.023Z","updated":"2022-12-24T09:39:26.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc1r3i820000u4g7bm633qim","content":"<h2 id=\"异常的连接数\"><a href=\"#异常的连接数\" class=\"headerlink\" title=\"异常的连接数\"></a>异常的连接数</h2><p>近日，镜像站莫名遭到多次攻击，症状表现为TCP连接数异常上升，久久得不到释放。后台监控检测到大量5XX错误，CPU负载高，正常业务受到较大影响。</p>\n<p>通过使用netstat命令可以统计服务器当前的各种TCP状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -n | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>我站在受攻击时的状态列表如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TIME_WAIT 168</span><br><span class=\"line\">CLOSE_WAIT 9</span><br><span class=\"line\">SYN_SENT 3</span><br><span class=\"line\">FIN_WAIT1 229</span><br><span class=\"line\">FIN_WAIT2 113</span><br><span class=\"line\">ESTABLISHED 234</span><br><span class=\"line\">SYN_RECV 1272</span><br><span class=\"line\">CLOSING 3</span><br><span class=\"line\">LAST_ACK 97</span><br></pre></td></tr></table></figure>\n\n<p>可以明显发现SYN_RECV连接数异常增多。</p>\n<p>仅通过这一现象就可以判断为服务器受到了SYN Flood泛洪攻击。</p>\n<h2 id=\"SYN-Flood泛洪攻击\"><a href=\"#SYN-Flood泛洪攻击\" class=\"headerlink\" title=\"SYN Flood泛洪攻击\"></a>SYN Flood泛洪攻击</h2><h3 id=\"什么是SYN-Flood攻击\"><a href=\"#什么是SYN-Flood攻击\" class=\"headerlink\" title=\"什么是SYN Flood攻击\"></a>什么是SYN Flood攻击</h3><p>SYN 泛洪（半开连接攻击）是一种拒绝服务(DDoS)攻击，旨在耗尽可用服务器资源，致使服务器无法传输合法流量。攻击者通过重复发送初始连接请求 (SYN) 数据包，可击垮目标服务器计算机上的所有可用端口，导致目标设备在响应正常业务流量时表现迟钝乃至全无响应。</p>\n<h3 id=\"SYN-Flood攻击的原理\"><a href=\"#SYN-Flood攻击的原理\" class=\"headerlink\" title=\"SYN Flood攻击的原理\"></a>SYN Flood攻击的原理</h3><p>SYN泛洪攻击，是利用TCP连接的握手过程中的缺陷实现的。</p>\n<p>攻击者通过发送大量伪造的TCP连接请求，常用假冒的IP或IP号段发来海量的请求连接的第一个握手包（SYN包），被攻击服务器回应第二个握手包（SYN+ACK包），因为对方是假冒IP，对方永远收不到包且不会回应第三个握手包。导致被攻击服务器保持大量SYN_RECV状态的“半连接”，并且会重试默认5次回应第二个握手包，塞满TCP等待连接队列。</p>\n<p><img src=\"https://www.cloudflare.com/img/learning/ddos/syn-flood-ddos-attack/syn-flood-attack-ddos-attack-diagram-2.png\" alt=\"SYN Flood DDoS 攻击动画\"></p>\n<h3 id=\"防御SYN-Flood\"><a href=\"#防御SYN-Flood\" class=\"headerlink\" title=\"防御SYN Flood\"></a>防御SYN Flood</h3><h4 id=\"增大Nginx的并发限制\"><a href=\"#增大Nginx的并发限制\" class=\"headerlink\" title=\"增大Nginx的并发限制\"></a>增大Nginx的并发限制</h4><p>适度调整Nginx主配置文件中的<code> worker_rlimit_nofile</code> 和<code> worker_connections</code></p>\n<p>可参考如下配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span> root root;</span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span> <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"attribute\">worker_rlimit_nofile</span> <span class=\"number\">65535</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#error_log logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log logs/error.log notice;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log logs/error.log info;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pid logs/nginx.pid;</span></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">use</span> <span class=\"literal\">epoll</span>;</span><br><span class=\"line\">        <span class=\"attribute\">worker_connections</span> <span class=\"number\">65535</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后通过<code>nginx -s reload</code>命令热重载Nginx配置文件</p>\n<h4 id=\"调整系统TCP栈参数\"><a href=\"#调整系统TCP栈参数\" class=\"headerlink\" title=\"调整系统TCP栈参数\"></a>调整系统TCP栈参数</h4><p> 在sysctl配置文件中，调整如下参数可有效减轻SYN Flood攻击带来的损害。</p>\n<ul>\n<li><p><code>net.core.netdev_max_backlog</code></p>\n<p>接受自网卡、但未被内核协议栈处理的报文队列长度</p>\n</li>\n<li><p><code>net.ipv4.tcp_max_syn_backlog</code></p>\n<p>SYN_RCVD连接状态的最大个数</p>\n</li>\n<li><p><code>net.ipv4.tcp_abort_on_overflow</code></p>\n<p>超出处理能力时，对新来的SYN直接回报RST，丢弃连接</p>\n</li>\n</ul>\n<h4 id=\"增大linux的最大文件句柄数限制\"><a href=\"#增大linux的最大文件句柄数限制\" class=\"headerlink\" title=\"增大linux的最大文件句柄数限制\"></a>增大linux的最大文件句柄数限制</h4><p>使用<code> ulimit -n</code> 查看本系统的最大文件句柄数限制，默认是1024</p>\n<p>可以通过修改<code> /etc/security/limts.conf</code>来改变该限制：</p>\n<p>在文件的最后追加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* soft nofile 655360</span><br><span class=\"line\">* hard nofile 655360</span><br></pre></td></tr></table></figure>\n\n<p>最前面的<code>*</code>代表全局设置。</p>\n","site":{"data":{}},"cover":"/img/cover.jpg","excerpt":"","more":"<h2 id=\"异常的连接数\"><a href=\"#异常的连接数\" class=\"headerlink\" title=\"异常的连接数\"></a>异常的连接数</h2><p>近日，镜像站莫名遭到多次攻击，症状表现为TCP连接数异常上升，久久得不到释放。后台监控检测到大量5XX错误，CPU负载高，正常业务受到较大影响。</p>\n<p>通过使用netstat命令可以统计服务器当前的各种TCP状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -n | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>我站在受攻击时的状态列表如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TIME_WAIT 168</span><br><span class=\"line\">CLOSE_WAIT 9</span><br><span class=\"line\">SYN_SENT 3</span><br><span class=\"line\">FIN_WAIT1 229</span><br><span class=\"line\">FIN_WAIT2 113</span><br><span class=\"line\">ESTABLISHED 234</span><br><span class=\"line\">SYN_RECV 1272</span><br><span class=\"line\">CLOSING 3</span><br><span class=\"line\">LAST_ACK 97</span><br></pre></td></tr></table></figure>\n\n<p>可以明显发现SYN_RECV连接数异常增多。</p>\n<p>仅通过这一现象就可以判断为服务器受到了SYN Flood泛洪攻击。</p>\n<h2 id=\"SYN-Flood泛洪攻击\"><a href=\"#SYN-Flood泛洪攻击\" class=\"headerlink\" title=\"SYN Flood泛洪攻击\"></a>SYN Flood泛洪攻击</h2><h3 id=\"什么是SYN-Flood攻击\"><a href=\"#什么是SYN-Flood攻击\" class=\"headerlink\" title=\"什么是SYN Flood攻击\"></a>什么是SYN Flood攻击</h3><p>SYN 泛洪（半开连接攻击）是一种拒绝服务(DDoS)攻击，旨在耗尽可用服务器资源，致使服务器无法传输合法流量。攻击者通过重复发送初始连接请求 (SYN) 数据包，可击垮目标服务器计算机上的所有可用端口，导致目标设备在响应正常业务流量时表现迟钝乃至全无响应。</p>\n<h3 id=\"SYN-Flood攻击的原理\"><a href=\"#SYN-Flood攻击的原理\" class=\"headerlink\" title=\"SYN Flood攻击的原理\"></a>SYN Flood攻击的原理</h3><p>SYN泛洪攻击，是利用TCP连接的握手过程中的缺陷实现的。</p>\n<p>攻击者通过发送大量伪造的TCP连接请求，常用假冒的IP或IP号段发来海量的请求连接的第一个握手包（SYN包），被攻击服务器回应第二个握手包（SYN+ACK包），因为对方是假冒IP，对方永远收不到包且不会回应第三个握手包。导致被攻击服务器保持大量SYN_RECV状态的“半连接”，并且会重试默认5次回应第二个握手包，塞满TCP等待连接队列。</p>\n<p><img src=\"https://www.cloudflare.com/img/learning/ddos/syn-flood-ddos-attack/syn-flood-attack-ddos-attack-diagram-2.png\" alt=\"SYN Flood DDoS 攻击动画\"></p>\n<h3 id=\"防御SYN-Flood\"><a href=\"#防御SYN-Flood\" class=\"headerlink\" title=\"防御SYN Flood\"></a>防御SYN Flood</h3><h4 id=\"增大Nginx的并发限制\"><a href=\"#增大Nginx的并发限制\" class=\"headerlink\" title=\"增大Nginx的并发限制\"></a>增大Nginx的并发限制</h4><p>适度调整Nginx主配置文件中的<code> worker_rlimit_nofile</code> 和<code> worker_connections</code></p>\n<p>可参考如下配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span> root root;</span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span> <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"attribute\">worker_rlimit_nofile</span> <span class=\"number\">65535</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#error_log logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log logs/error.log notice;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log logs/error.log info;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pid logs/nginx.pid;</span></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">use</span> <span class=\"literal\">epoll</span>;</span><br><span class=\"line\">        <span class=\"attribute\">worker_connections</span> <span class=\"number\">65535</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后通过<code>nginx -s reload</code>命令热重载Nginx配置文件</p>\n<h4 id=\"调整系统TCP栈参数\"><a href=\"#调整系统TCP栈参数\" class=\"headerlink\" title=\"调整系统TCP栈参数\"></a>调整系统TCP栈参数</h4><p> 在sysctl配置文件中，调整如下参数可有效减轻SYN Flood攻击带来的损害。</p>\n<ul>\n<li><p><code>net.core.netdev_max_backlog</code></p>\n<p>接受自网卡、但未被内核协议栈处理的报文队列长度</p>\n</li>\n<li><p><code>net.ipv4.tcp_max_syn_backlog</code></p>\n<p>SYN_RCVD连接状态的最大个数</p>\n</li>\n<li><p><code>net.ipv4.tcp_abort_on_overflow</code></p>\n<p>超出处理能力时，对新来的SYN直接回报RST，丢弃连接</p>\n</li>\n</ul>\n<h4 id=\"增大linux的最大文件句柄数限制\"><a href=\"#增大linux的最大文件句柄数限制\" class=\"headerlink\" title=\"增大linux的最大文件句柄数限制\"></a>增大linux的最大文件句柄数限制</h4><p>使用<code> ulimit -n</code> 查看本系统的最大文件句柄数限制，默认是1024</p>\n<p>可以通过修改<code> /etc/security/limts.conf</code>来改变该限制：</p>\n<p>在文件的最后追加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* soft nofile 655360</span><br><span class=\"line\">* hard nofile 655360</span><br></pre></td></tr></table></figure>\n\n<p>最前面的<code>*</code>代表全局设置。</p>\n"},{"title":"云场景下的网络QoS","cover":"https://s2.loli.net/2022/12/24/FI1YkGehQyVKs9T.jpg","_content":"\n公共的网络链路总会不可避免的产生带宽抢占的问题，我们通常使用QoS技术保障大多数用户的服务质量。\n\n![img](https://static001.geekbang.org/resource/image/74/11/747b0d537fd1705171ffcca3faf96211.jpg?wh=1539*646)\n\n一台服务器能控制的只有出方向的QoS，通过Shaping将出站流量整形，至于入栈流量只能通过Policy决定丢弃哪一部分数据包。\n\n## 队列方式控制网络QoS\n\nLinux下的TC就主要是使用队列技术控制的网络QoS。\n\n### 无类别排队规则\n\n不分类（或称无类别）排队规则（classless queueing disciplines）可以对某个网络 接口（interface）上的所有流量进行**无差别整形**。包括对数据进行：\n\n- 重新调度（reschedule）\n- 增加延迟（delay）\n- 丢弃（drop）\n\n与 classless qdisc 对应的是 classful qdisc，即有类别（或称分类别）排队规则。目前最常用的classless qdisc 是**pfifo_fast**，这也是很多系统上的 默认排队规则。\n\n##### pfifo_fast 先入先出队列\n\n如名字所示，这是一个先入先出(FIFO)队列，因此对所有的包都一视同仁。\n\n![img](https://arthurchiao.art/assets/img/lartc-qdisc/pfifo_fast-qdisc.png)\n\npfifo_fast有三个所谓的 “band”（可理解为三个队列），编号分别为 0、1、2：\n\n![img](https://static001.geekbang.org/resource/image/e3/6c/e391b4b79580a7d66afe4307ff3f6f6c.jpg?wh=2037*1175)\n\n- 每个band上分别执行 FIFO 规则。\n- 如果band 0有数据，就不会处理band 1；同理，band 1有数据时，不会去处理band 2。\n- 内核会检查数据包的 `TOS`字段，将“最小延迟”的包放到band 0。\n\n\n\n##### Stochastic Fair Queuing (随机公平队列)\n\n![img](https://static001.geekbang.org/resource/image/b6/99/b6ec2e4e20ddee7d6952b7fa4586ba99.jpg?wh=2177*1182)\n\n这种无类别队列规则会建立很多的 FIFO 的队列，TCP Session 会计算 hash 值，通过 hash 值分配到某个队列。在队列的另一端，网络包会通过轮询策略从各个队列中取出发送。这样不会有一个 Session 占据所有的流量。\n\n当然，如果两个 Session 的 hash 是一样的，会共享一个队列，也有可能互相影响。hash 函数会经常改变，从而 session 不会总是相互影响。\n\n\n\n##### Tolen Bucket Filte (TBF,令牌桶规则)\n\n![img](https://static001.geekbang.org/resource/image/14/9b/145c6f8593bf7603eae79246b9d6859b.jpg?wh=1894*1100)\n\n所有的网络包排成队列进行发送，但不是到了队头就能发送，而是需要拿到令牌才能发送。\n\n令牌根据设定的速度生成，所以即便队列很长，也是按照一定的速度进行发送的。当没有包在队列中的时候，令牌还是以既定的速度生成，但是不是无限累积的，而是放满了桶为止。\n\n设置桶的大小为了避免下面的情况：当长时间没有网络包发送的时候，积累了大量的令牌，突然来了大量的网络包，每个都能得到令牌，造成瞬间流量大增。","source":"_posts/QoS.md","raw":"---\ntitle: 云场景下的网络QoS\ncover: https://s2.loli.net/2022/12/24/FI1YkGehQyVKs9T.jpg\ntags: Computer Network\n---\n\n公共的网络链路总会不可避免的产生带宽抢占的问题，我们通常使用QoS技术保障大多数用户的服务质量。\n\n![img](https://static001.geekbang.org/resource/image/74/11/747b0d537fd1705171ffcca3faf96211.jpg?wh=1539*646)\n\n一台服务器能控制的只有出方向的QoS，通过Shaping将出站流量整形，至于入栈流量只能通过Policy决定丢弃哪一部分数据包。\n\n## 队列方式控制网络QoS\n\nLinux下的TC就主要是使用队列技术控制的网络QoS。\n\n### 无类别排队规则\n\n不分类（或称无类别）排队规则（classless queueing disciplines）可以对某个网络 接口（interface）上的所有流量进行**无差别整形**。包括对数据进行：\n\n- 重新调度（reschedule）\n- 增加延迟（delay）\n- 丢弃（drop）\n\n与 classless qdisc 对应的是 classful qdisc，即有类别（或称分类别）排队规则。目前最常用的classless qdisc 是**pfifo_fast**，这也是很多系统上的 默认排队规则。\n\n##### pfifo_fast 先入先出队列\n\n如名字所示，这是一个先入先出(FIFO)队列，因此对所有的包都一视同仁。\n\n![img](https://arthurchiao.art/assets/img/lartc-qdisc/pfifo_fast-qdisc.png)\n\npfifo_fast有三个所谓的 “band”（可理解为三个队列），编号分别为 0、1、2：\n\n![img](https://static001.geekbang.org/resource/image/e3/6c/e391b4b79580a7d66afe4307ff3f6f6c.jpg?wh=2037*1175)\n\n- 每个band上分别执行 FIFO 规则。\n- 如果band 0有数据，就不会处理band 1；同理，band 1有数据时，不会去处理band 2。\n- 内核会检查数据包的 `TOS`字段，将“最小延迟”的包放到band 0。\n\n\n\n##### Stochastic Fair Queuing (随机公平队列)\n\n![img](https://static001.geekbang.org/resource/image/b6/99/b6ec2e4e20ddee7d6952b7fa4586ba99.jpg?wh=2177*1182)\n\n这种无类别队列规则会建立很多的 FIFO 的队列，TCP Session 会计算 hash 值，通过 hash 值分配到某个队列。在队列的另一端，网络包会通过轮询策略从各个队列中取出发送。这样不会有一个 Session 占据所有的流量。\n\n当然，如果两个 Session 的 hash 是一样的，会共享一个队列，也有可能互相影响。hash 函数会经常改变，从而 session 不会总是相互影响。\n\n\n\n##### Tolen Bucket Filte (TBF,令牌桶规则)\n\n![img](https://static001.geekbang.org/resource/image/14/9b/145c6f8593bf7603eae79246b9d6859b.jpg?wh=1894*1100)\n\n所有的网络包排成队列进行发送，但不是到了队头就能发送，而是需要拿到令牌才能发送。\n\n令牌根据设定的速度生成，所以即便队列很长，也是按照一定的速度进行发送的。当没有包在队列中的时候，令牌还是以既定的速度生成，但是不是无限累积的，而是放满了桶为止。\n\n设置桶的大小为了避免下面的情况：当长时间没有网络包发送的时候，积累了大量的令牌，突然来了大量的网络包，每个都能得到令牌，造成瞬间流量大增。","slug":"QoS","published":1,"date":"2022-12-24T10:51:17.644Z","updated":"2022-12-24T12:00:18.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc1w4qdq0000y8g77ft106wy","content":"<p>公共的网络链路总会不可避免的产生带宽抢占的问题，我们通常使用QoS技术保障大多数用户的服务质量。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/74/11/747b0d537fd1705171ffcca3faf96211.jpg?wh=1539*646\" alt=\"img\"></p>\n<p>一台服务器能控制的只有出方向的QoS，通过Shaping将出站流量整形，至于入栈流量只能通过Policy决定丢弃哪一部分数据包。</p>\n<h2 id=\"队列方式控制网络QoS\"><a href=\"#队列方式控制网络QoS\" class=\"headerlink\" title=\"队列方式控制网络QoS\"></a>队列方式控制网络QoS</h2><p>Linux下的TC就主要是使用队列技术控制的网络QoS。</p>\n<h3 id=\"无类别排队规则\"><a href=\"#无类别排队规则\" class=\"headerlink\" title=\"无类别排队规则\"></a>无类别排队规则</h3><p>不分类（或称无类别）排队规则（classless queueing disciplines）可以对某个网络 接口（interface）上的所有流量进行<strong>无差别整形</strong>。包括对数据进行：</p>\n<ul>\n<li>重新调度（reschedule）</li>\n<li>增加延迟（delay）</li>\n<li>丢弃（drop）</li>\n</ul>\n<p>与 classless qdisc 对应的是 classful qdisc，即有类别（或称分类别）排队规则。目前最常用的classless qdisc 是<strong>pfifo_fast</strong>，这也是很多系统上的 默认排队规则。</p>\n<h5 id=\"pfifo-fast-先入先出队列\"><a href=\"#pfifo-fast-先入先出队列\" class=\"headerlink\" title=\"pfifo_fast 先入先出队列\"></a>pfifo_fast 先入先出队列</h5><p>如名字所示，这是一个先入先出(FIFO)队列，因此对所有的包都一视同仁。</p>\n<p><img src=\"https://arthurchiao.art/assets/img/lartc-qdisc/pfifo_fast-qdisc.png\" alt=\"img\"></p>\n<p>pfifo_fast有三个所谓的 “band”（可理解为三个队列），编号分别为 0、1、2：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/e3/6c/e391b4b79580a7d66afe4307ff3f6f6c.jpg?wh=2037*1175\" alt=\"img\"></p>\n<ul>\n<li>每个band上分别执行 FIFO 规则。</li>\n<li>如果band 0有数据，就不会处理band 1；同理，band 1有数据时，不会去处理band 2。</li>\n<li>内核会检查数据包的 <code>TOS</code>字段，将“最小延迟”的包放到band 0。</li>\n</ul>\n<h5 id=\"Stochastic-Fair-Queuing-随机公平队列\"><a href=\"#Stochastic-Fair-Queuing-随机公平队列\" class=\"headerlink\" title=\"Stochastic Fair Queuing (随机公平队列)\"></a>Stochastic Fair Queuing (随机公平队列)</h5><p><img src=\"https://static001.geekbang.org/resource/image/b6/99/b6ec2e4e20ddee7d6952b7fa4586ba99.jpg?wh=2177*1182\" alt=\"img\"></p>\n<p>这种无类别队列规则会建立很多的 FIFO 的队列，TCP Session 会计算 hash 值，通过 hash 值分配到某个队列。在队列的另一端，网络包会通过轮询策略从各个队列中取出发送。这样不会有一个 Session 占据所有的流量。</p>\n<p>当然，如果两个 Session 的 hash 是一样的，会共享一个队列，也有可能互相影响。hash 函数会经常改变，从而 session 不会总是相互影响。</p>\n<h5 id=\"Tolen-Bucket-Filte-TBF-令牌桶规则\"><a href=\"#Tolen-Bucket-Filte-TBF-令牌桶规则\" class=\"headerlink\" title=\"Tolen Bucket Filte (TBF,令牌桶规则)\"></a>Tolen Bucket Filte (TBF,令牌桶规则)</h5><p><img src=\"https://static001.geekbang.org/resource/image/14/9b/145c6f8593bf7603eae79246b9d6859b.jpg?wh=1894*1100\" alt=\"img\"></p>\n<p>所有的网络包排成队列进行发送，但不是到了队头就能发送，而是需要拿到令牌才能发送。</p>\n<p>令牌根据设定的速度生成，所以即便队列很长，也是按照一定的速度进行发送的。当没有包在队列中的时候，令牌还是以既定的速度生成，但是不是无限累积的，而是放满了桶为止。</p>\n<p>设置桶的大小为了避免下面的情况：当长时间没有网络包发送的时候，积累了大量的令牌，突然来了大量的网络包，每个都能得到令牌，造成瞬间流量大增。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>公共的网络链路总会不可避免的产生带宽抢占的问题，我们通常使用QoS技术保障大多数用户的服务质量。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/74/11/747b0d537fd1705171ffcca3faf96211.jpg?wh=1539*646\" alt=\"img\"></p>\n<p>一台服务器能控制的只有出方向的QoS，通过Shaping将出站流量整形，至于入栈流量只能通过Policy决定丢弃哪一部分数据包。</p>\n<h2 id=\"队列方式控制网络QoS\"><a href=\"#队列方式控制网络QoS\" class=\"headerlink\" title=\"队列方式控制网络QoS\"></a>队列方式控制网络QoS</h2><p>Linux下的TC就主要是使用队列技术控制的网络QoS。</p>\n<h3 id=\"无类别排队规则\"><a href=\"#无类别排队规则\" class=\"headerlink\" title=\"无类别排队规则\"></a>无类别排队规则</h3><p>不分类（或称无类别）排队规则（classless queueing disciplines）可以对某个网络 接口（interface）上的所有流量进行<strong>无差别整形</strong>。包括对数据进行：</p>\n<ul>\n<li>重新调度（reschedule）</li>\n<li>增加延迟（delay）</li>\n<li>丢弃（drop）</li>\n</ul>\n<p>与 classless qdisc 对应的是 classful qdisc，即有类别（或称分类别）排队规则。目前最常用的classless qdisc 是<strong>pfifo_fast</strong>，这也是很多系统上的 默认排队规则。</p>\n<h5 id=\"pfifo-fast-先入先出队列\"><a href=\"#pfifo-fast-先入先出队列\" class=\"headerlink\" title=\"pfifo_fast 先入先出队列\"></a>pfifo_fast 先入先出队列</h5><p>如名字所示，这是一个先入先出(FIFO)队列，因此对所有的包都一视同仁。</p>\n<p><img src=\"https://arthurchiao.art/assets/img/lartc-qdisc/pfifo_fast-qdisc.png\" alt=\"img\"></p>\n<p>pfifo_fast有三个所谓的 “band”（可理解为三个队列），编号分别为 0、1、2：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/e3/6c/e391b4b79580a7d66afe4307ff3f6f6c.jpg?wh=2037*1175\" alt=\"img\"></p>\n<ul>\n<li>每个band上分别执行 FIFO 规则。</li>\n<li>如果band 0有数据，就不会处理band 1；同理，band 1有数据时，不会去处理band 2。</li>\n<li>内核会检查数据包的 <code>TOS</code>字段，将“最小延迟”的包放到band 0。</li>\n</ul>\n<h5 id=\"Stochastic-Fair-Queuing-随机公平队列\"><a href=\"#Stochastic-Fair-Queuing-随机公平队列\" class=\"headerlink\" title=\"Stochastic Fair Queuing (随机公平队列)\"></a>Stochastic Fair Queuing (随机公平队列)</h5><p><img src=\"https://static001.geekbang.org/resource/image/b6/99/b6ec2e4e20ddee7d6952b7fa4586ba99.jpg?wh=2177*1182\" alt=\"img\"></p>\n<p>这种无类别队列规则会建立很多的 FIFO 的队列，TCP Session 会计算 hash 值，通过 hash 值分配到某个队列。在队列的另一端，网络包会通过轮询策略从各个队列中取出发送。这样不会有一个 Session 占据所有的流量。</p>\n<p>当然，如果两个 Session 的 hash 是一样的，会共享一个队列，也有可能互相影响。hash 函数会经常改变，从而 session 不会总是相互影响。</p>\n<h5 id=\"Tolen-Bucket-Filte-TBF-令牌桶规则\"><a href=\"#Tolen-Bucket-Filte-TBF-令牌桶规则\" class=\"headerlink\" title=\"Tolen Bucket Filte (TBF,令牌桶规则)\"></a>Tolen Bucket Filte (TBF,令牌桶规则)</h5><p><img src=\"https://static001.geekbang.org/resource/image/14/9b/145c6f8593bf7603eae79246b9d6859b.jpg?wh=1894*1100\" alt=\"img\"></p>\n<p>所有的网络包排成队列进行发送，但不是到了队头就能发送，而是需要拿到令牌才能发送。</p>\n<p>令牌根据设定的速度生成，所以即便队列很长，也是按照一定的速度进行发送的。当没有包在队列中的时候，令牌还是以既定的速度生成，但是不是无限累积的，而是放满了桶为止。</p>\n<p>设置桶的大小为了避免下面的情况：当长时间没有网络包发送的时候，积累了大量的令牌，突然来了大量的网络包，每个都能得到令牌，造成瞬间流量大增。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clblitu7p0000hwg7asxs7inf","tag_id":"clblj6mcs0001q4g7b6cl6r0v","_id":"clblj6mct0002q4g735jo5oxs"},{"post_id":"clc1r3i820000u4g7bm633qim","tag_id":"clc1r3i880001u4g741pscag8","_id":"clc1r3i8a0002u4g7dfn52wqa"},{"post_id":"clc1w4qdq0000y8g77ft106wy","tag_id":"clc1w4qdw0001y8g72oq775go","_id":"clc1w4qdy0002y8g76rn349bs"}],"Tag":[{"name":"High Performance Computing","_id":"clblj6mcs0001q4g7b6cl6r0v"},{"name":"Cyberspace Security","_id":"clc1r3i880001u4g741pscag8"},{"name":"Computer Network","_id":"clc1w4qdw0001y8g72oq775go"}]}}